Parameters:

  HostedZoneName:
    Type: String
    Description: Route53 hosted zone domain name (! don't include trailing '.')

  UbuntuAMIParameter:
    Type: String
    Default: ami-ae6259cd
    Description: Ubuntu 16.04 AMI (default is ap-southeast-2 image) Choose relevant ubuntu image for your region.

  SpatialServicesSubDomain:
    Type: String
    Description: sub domain which API Gateway will proxy to

  KeyPairParameter:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Keypair for EC2 instance

Resources:

  VPC:
    Type: "AWS::EC2::VPC"
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: !Join [ "-", [ !Ref "AWS::StackName", vpc ] ]

  InternetGateway:
    Type: "AWS::EC2::InternetGateway"
    Properties:
      Tags:
        - Key: Name
          Value: !Join [ "-", [ !Ref "AWS::StackName", ig ] ]

  VPCGatewayAttachment:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC


  PublicSubnet:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: ap-southeast-2a
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Join [ "-", [ !Ref "AWS::StackName", public-subnet ] ]
      VpcId: !Ref VPC

  PublicRouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Join [ "-", [ !Ref "AWS::StackName", public ] ]

  PublicRouteTableAssoc:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet

  IGRoute:
    DependsOn: VPCGatewayAttachment
    Type: "AWS::EC2::Route"
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PublicRouteTable

  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Join [ "-", [ !Ref "AWS::StackName", sg ] ]
      SecurityGroupIngress:
        -
          IpProtocol: "tcp"
          FromPort: "22"
          ToPort: "22"
          CidrIp: "0.0.0.0/0"
        -
          IpProtocol: "tcp"
          FromPort: "5000"
          ToPort: "5000"
          CidrIp: "0.0.0.0/0"
        -
          IpProtocol: "tcp"
          FromPort: "443"
          ToPort: "443"
          CidrIp: "0.0.0.0/0"
        -
          IpProtocol: "tcp"
          FromPort: "80"
          ToPort: "80"
          CidrIp: "0.0.0.0/0"
      VpcId:
        !Ref VPC


  SpatialEC2:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.nano
      ImageId:
        Ref: UbuntuAMIParameter
      KeyName:
        Ref: KeyPairParameter
      Tags:
        - Key: Name
          Value: !Join [ "-", [ !Ref "AWS::StackName", spatial-ec2  ] ]
      SecurityGroupIds:
        - !Ref EC2SecurityGroup
      SubnetId: !Ref PublicSubnet
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          FQDN=${SpatialServicesSubDomain}.${HostedZoneName}
          apt-get update
          apt-get install git
          git clone https://github.com/gsat-technology/spatial
          chmod u+x ./spatial/ec2-conf*.sh
          ./spatial/ec2-conf/install-docker.sh
          ./spatial/ec2-conf/install-nginx.sh

  DNSRecord:
    Type: "AWS::Route53::RecordSet"
    Properties:
      HostedZoneName: !Join [ ".", [ !Ref HostedZoneName, "" ] ]
      Name: !Join [ ".", [ !Ref SpatialServicesSubDomain, !Ref HostedZoneName ] ]
      ResourceRecords:
        - !GetAtt SpatialEC2.PublicIp
      TTL: 300
      Type: A
