Parameters:

  HostedZoneName:
    Type: String
    Description: Route53 hosted zone domain name e.g. yourdomain.com (don't include trailing '.')

  UbuntuAMIParameter:
    Type: String
    Default: ami-ae6259cd
    Description: Ubuntu 16.04 AMI (default is ap-southeast-2 image) Choose relevant ubuntu image for your region.

  SpatialServicesSubDomain:
    Type: String
    Description: sub domain which API Gateway will proxy to

  LetsencryptEmail:
    Type: String
    Description: email address for letsencrypt cert registration purposes

  KeyPairParameter:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Keypair for EC2 instance

Resources:

  VPC:
    Type: "AWS::EC2::VPC"
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: !Join [ "-", [ !Ref "AWS::StackName", vpc ] ]

  InternetGateway:
    Type: "AWS::EC2::InternetGateway"
    Properties:
      Tags:
        - Key: Name
          Value: !Join [ "-", [ !Ref "AWS::StackName", ig ] ]

  VPCGatewayAttachment:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC


  PublicSubnet:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: ap-southeast-2a
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Join [ "-", [ !Ref "AWS::StackName", public-subnet ] ]
      VpcId: !Ref VPC

  PublicRouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Join [ "-", [ !Ref "AWS::StackName", public ] ]

  PublicRouteTableAssoc:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet

  IGRoute:
    DependsOn: VPCGatewayAttachment
    Type: "AWS::EC2::Route"
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PublicRouteTable

  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Join [ "-", [ !Ref "AWS::StackName", sg ] ]
      SecurityGroupIngress:
        -
          IpProtocol: "tcp"
          FromPort: "22"
          ToPort: "22"
          CidrIp: "0.0.0.0/0"
        -
          IpProtocol: "tcp"
          FromPort: "5000"
          ToPort: "5000"
          CidrIp: "0.0.0.0/0"
        -
          IpProtocol: "tcp"
          FromPort: "443"
          ToPort: "443"
          CidrIp: "0.0.0.0/0"
        -
          IpProtocol: "tcp"
          FromPort: "80"
          ToPort: "80"
          CidrIp: "0.0.0.0/0"
      VpcId:
        !Ref VPC

  EC2Role:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "ec2.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        -
          PolicyName: "inline-policy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action:
                  - apigateway:GET
                Resource: !Sub arn:aws:apigateway:${AWS::Region}::/clientcertificates/${APIGClientCertificate}

  EC2InstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Roles:
        - !Ref EC2Role

  SpatialServicesEC2:
    DependsOn:
      - APIGClientCertificate
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.nano
      ImageId:
        Ref: UbuntuAMIParameter
      KeyName:
        Ref: KeyPairParameter
      Tags:
        - Key: Name
          Value: !Join [ "-", [ !Ref "AWS::StackName", spatial-ec2  ] ]
      SecurityGroupIds:
        - !Ref EC2SecurityGroup
      IamInstanceProfile: !Ref EC2InstanceProfile
      SubnetId: !Ref PublicSubnet
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          export APIG_CLIENT_CERT=${APIGClientCertificate}
          export FQDN=${SpatialServicesSubDomain}.${HostedZoneName}
          export EMAIL=${LetsencryptEmail}
          export AWS_DEFAULT_REGION=${AWS::Region}
          echo $FQDN
          echo $EMAIL
          apt-get update
          apt-get install -y git
          apt-get install -y postgresql-client
          git clone https://github.com/gsat-technology/spatial
          chmod u+x ./spatial/ec2-conf/*.sh
          ./spatial/ec2-conf/install-docker.sh
          ./spatial/ec2-conf/install-nginx.sh $FQDN $EMAIL
          docker-compose -f ./spatial/docker-compose.yml up --build -d
          export PGPASSWORD=docker
          psql -U docker -h localhost -p 5432 postgres -c "CREATE DATABASE spatial;"
          #previous command may not work if postgis not fully in service
          #below while loop keeps trying until it works
          while [ $? -ne 0 ]; do sleep 1 ; psql -U docker -h localhost -p 5432 postgres -c "CREATE DATABASE spatial;" ; done
          psql -U docker -h localhost -p 5432 spatial -f ./spatial/files/spatial.dump.sql
          #configure api gateway client certificate
          pip install awscli
          apt-get install -y jq
          mkdir /etc/nginx/apig
          aws apigateway get-client-certificate --client-certificate-id $APIG_CLIENT_CERT \
            | jq .pemEncodedCertificate --raw-output > /etc/nginx/apig/client.crt
          service nginx restart



  DNSRecord:
    Type: "AWS::Route53::RecordSet"
    Properties:
      HostedZoneName: !Join [ ".", [ !Ref HostedZoneName, "" ] ]
      Name: !Join [ ".", [ !Ref SpatialServicesSubDomain, !Ref HostedZoneName ] ]
      ResourceRecords:
        - !GetAtt SpatialServicesEC2.PublicIp
      TTL: 300
      Type: A

  APIGateway:
    Type: "AWS::ApiGateway::RestApi"
    Properties:
      Name:
        !Join [ "_", [ !Ref "AWS::StackName", APIG ] ]

  APIGTerminiResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId:
        !GetAtt APIGateway.RootResourceId
      PathPart: termini
      RestApiId: !Ref APIGateway

  TerminiResourceGET:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: GET
      ResourceId:
        !Ref APIGTerminiResource
      RestApiId:
        !Ref APIGateway
      Integration:
        IntegrationHttpMethod: GET
        Type: HTTP_PROXY
        Uri: !Sub https://${SpatialServicesSubDomain}.${HostedZoneName}/termini

  TerminiResourceOPTIONS:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      RestApiId: !Ref APIGateway
      ResourceId: !Ref APIGTerminiResource
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
            method.response.header.Access-Control-Allow-Methods: "'GET'"
            method.response.header.Access-Control-Allow-Origin: "'*'"
          ResponseTemplates:
            application/json: ''
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
      - StatusCode: 200
        ResponseModels:
          application/json: 'Empty'
        ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false

  #Note this resource is required even though it will
  #actually create a stage called 'dummystage' which won't
  #be used. Some info from AWS forum here:
  #https://forums.aws.amazon.com/thread.jspa?messageID=737087
  APIGDeploymentProd:
    DependsOn:
      - APIGTerminiResource
      - TerminiResourceGET
    Type: "AWS::ApiGateway::Deployment"
    Properties:
      RestApiId:
        !Ref APIGateway
      StageName: dummystage

  APIGStage:
    Type: "AWS::ApiGateway::Stage"
    Properties:
      ClientCertificateId: !Ref APIGClientCertificate
      DeploymentId: !Ref APIGDeploymentProd
      RestApiId: !Ref APIGateway
      StageName: LATEST


  APIGClientCertificate:
    Type: "AWS::ApiGateway::ClientCertificate"
    Properties:
      Description: !Sub ${AWS::Region}-client-cert

Outputs:
  APIGEndpoint:
    Description: APIG endpoint
    Value:
      !Sub https://${APIGateway}.execute-api.${AWS::Region}.amazonaws.com/LATEST
